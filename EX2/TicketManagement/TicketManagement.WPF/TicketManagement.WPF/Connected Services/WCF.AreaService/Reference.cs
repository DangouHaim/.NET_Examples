//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicketManagement.WPF.WCF.AreaService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Area", Namespace="http://schemas.datacontract.org/2004/07/DataPresenter.Entity")]
    [System.SerializableAttribute()]
    public partial class Area : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CoordXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CoordYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LayoutIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CoordX {
            get {
                return this.CoordXField;
            }
            set {
                if ((this.CoordXField.Equals(value) != true)) {
                    this.CoordXField = value;
                    this.RaisePropertyChanged("CoordX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CoordY {
            get {
                return this.CoordYField;
            }
            set {
                if ((this.CoordYField.Equals(value) != true)) {
                    this.CoordYField = value;
                    this.RaisePropertyChanged("CoordY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LayoutId {
            get {
                return this.LayoutIdField;
            }
            set {
                if ((this.LayoutIdField.Equals(value) != true)) {
                    this.LayoutIdField = value;
                    this.RaisePropertyChanged("LayoutId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCF.AreaService.IAreaService")]
    public interface IAreaService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAreaService/Delete", ReplyAction="http://tempuri.org/IAreaService/DeleteResponse")]
        bool Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAreaService/Delete", ReplyAction="http://tempuri.org/IAreaService/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAreaService/Get", ReplyAction="http://tempuri.org/IAreaService/GetResponse")]
        TicketManagement.WPF.WCF.AreaService.Area Get(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAreaService/Get", ReplyAction="http://tempuri.org/IAreaService/GetResponse")]
        System.Threading.Tasks.Task<TicketManagement.WPF.WCF.AreaService.Area> GetAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAreaService/GetAll", ReplyAction="http://tempuri.org/IAreaService/GetAllResponse")]
        TicketManagement.WPF.WCF.AreaService.Area[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAreaService/GetAll", ReplyAction="http://tempuri.org/IAreaService/GetAllResponse")]
        System.Threading.Tasks.Task<TicketManagement.WPF.WCF.AreaService.Area[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAreaService/Save", ReplyAction="http://tempuri.org/IAreaService/SaveResponse")]
        int Save(TicketManagement.WPF.WCF.AreaService.Area area);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAreaService/Save", ReplyAction="http://tempuri.org/IAreaService/SaveResponse")]
        System.Threading.Tasks.Task<int> SaveAsync(TicketManagement.WPF.WCF.AreaService.Area area);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAreaService/Update", ReplyAction="http://tempuri.org/IAreaService/UpdateResponse")]
        bool Update(TicketManagement.WPF.WCF.AreaService.Area area);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAreaService/Update", ReplyAction="http://tempuri.org/IAreaService/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(TicketManagement.WPF.WCF.AreaService.Area area);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAreaServiceChannel : TicketManagement.WPF.WCF.AreaService.IAreaService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AreaServiceClient : System.ServiceModel.ClientBase<TicketManagement.WPF.WCF.AreaService.IAreaService>, TicketManagement.WPF.WCF.AreaService.IAreaService {
        
        public AreaServiceClient() {
        }
        
        public AreaServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AreaServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AreaServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AreaServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Delete(int id) {
            return base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public TicketManagement.WPF.WCF.AreaService.Area Get(int id) {
            return base.Channel.Get(id);
        }
        
        public System.Threading.Tasks.Task<TicketManagement.WPF.WCF.AreaService.Area> GetAsync(int id) {
            return base.Channel.GetAsync(id);
        }
        
        public TicketManagement.WPF.WCF.AreaService.Area[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<TicketManagement.WPF.WCF.AreaService.Area[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public int Save(TicketManagement.WPF.WCF.AreaService.Area area) {
            return base.Channel.Save(area);
        }
        
        public System.Threading.Tasks.Task<int> SaveAsync(TicketManagement.WPF.WCF.AreaService.Area area) {
            return base.Channel.SaveAsync(area);
        }
        
        public bool Update(TicketManagement.WPF.WCF.AreaService.Area area) {
            return base.Channel.Update(area);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(TicketManagement.WPF.WCF.AreaService.Area area) {
            return base.Channel.UpdateAsync(area);
        }
    }
}
