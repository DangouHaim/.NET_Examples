//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicketManagement.ASP.WCF.UserService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCF.UserService.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Delete", ReplyAction="http://tempuri.org/IUserService/DeleteResponse")]
        bool Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Delete", ReplyAction="http://tempuri.org/IUserService/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Get", ReplyAction="http://tempuri.org/IUserService/GetResponse")]
        DataPresenter.Entity.User Get(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Get", ReplyAction="http://tempuri.org/IUserService/GetResponse")]
        System.Threading.Tasks.Task<DataPresenter.Entity.User> GetAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAll", ReplyAction="http://tempuri.org/IUserService/GetAllResponse")]
        DataPresenter.Entity.User[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAll", ReplyAction="http://tempuri.org/IUserService/GetAllResponse")]
        System.Threading.Tasks.Task<DataPresenter.Entity.User[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Save", ReplyAction="http://tempuri.org/IUserService/SaveResponse")]
        int Save(DataPresenter.Entity.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Save", ReplyAction="http://tempuri.org/IUserService/SaveResponse")]
        System.Threading.Tasks.Task<int> SaveAsync(DataPresenter.Entity.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Update", ReplyAction="http://tempuri.org/IUserService/UpdateResponse")]
        bool Update(DataPresenter.Entity.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Update", ReplyAction="http://tempuri.org/IUserService/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(DataPresenter.Entity.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Find", ReplyAction="http://tempuri.org/IUserService/FindResponse")]
        DataPresenter.Entity.User[] Find(string emailOrLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Find", ReplyAction="http://tempuri.org/IUserService/FindResponse")]
        System.Threading.Tasks.Task<DataPresenter.Entity.User[]> FindAsync(string emailOrLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetCart", ReplyAction="http://tempuri.org/IUserService/GetCartResponse")]
        DataPresenter.Entity.GetUserCart_Result3[] GetCart(int uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetCart", ReplyAction="http://tempuri.org/IUserService/GetCartResponse")]
        System.Threading.Tasks.Task<DataPresenter.Entity.GetUserCart_Result3[]> GetCartAsync(int uid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : TicketManagement.ASP.WCF.UserService.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<TicketManagement.ASP.WCF.UserService.IUserService>, TicketManagement.ASP.WCF.UserService.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Delete(int id) {
            return base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public DataPresenter.Entity.User Get(int id) {
            return base.Channel.Get(id);
        }
        
        public System.Threading.Tasks.Task<DataPresenter.Entity.User> GetAsync(int id) {
            return base.Channel.GetAsync(id);
        }
        
        public DataPresenter.Entity.User[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<DataPresenter.Entity.User[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public int Save(DataPresenter.Entity.User user) {
            return base.Channel.Save(user);
        }
        
        public System.Threading.Tasks.Task<int> SaveAsync(DataPresenter.Entity.User user) {
            return base.Channel.SaveAsync(user);
        }
        
        public bool Update(DataPresenter.Entity.User user) {
            return base.Channel.Update(user);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(DataPresenter.Entity.User user) {
            return base.Channel.UpdateAsync(user);
        }
        
        public DataPresenter.Entity.User[] Find(string emailOrLogin) {
            return base.Channel.Find(emailOrLogin);
        }
        
        public System.Threading.Tasks.Task<DataPresenter.Entity.User[]> FindAsync(string emailOrLogin) {
            return base.Channel.FindAsync(emailOrLogin);
        }
        
        public DataPresenter.Entity.GetUserCart_Result3[] GetCart(int uid) {
            return base.Channel.GetCart(uid);
        }
        
        public System.Threading.Tasks.Task<DataPresenter.Entity.GetUserCart_Result3[]> GetCartAsync(int uid) {
            return base.Channel.GetCartAsync(uid);
        }
    }
}
