//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicketManagement.ASP.WCF.EventService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCF.EventService.IEventService")]
    public interface IEventService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/Delete", ReplyAction="http://tempuri.org/IEventService/DeleteResponse")]
        bool Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/Delete", ReplyAction="http://tempuri.org/IEventService/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/Get", ReplyAction="http://tempuri.org/IEventService/GetResponse")]
        DataPresenter.Entity.Event Get(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/Get", ReplyAction="http://tempuri.org/IEventService/GetResponse")]
        System.Threading.Tasks.Task<DataPresenter.Entity.Event> GetAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetAll", ReplyAction="http://tempuri.org/IEventService/GetAllResponse")]
        DataPresenter.Entity.Event[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetAll", ReplyAction="http://tempuri.org/IEventService/GetAllResponse")]
        System.Threading.Tasks.Task<DataPresenter.Entity.Event[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetForLayout", ReplyAction="http://tempuri.org/IEventService/GetForLayoutResponse")]
        DataPresenter.Entity.Event[] GetForLayout(int layoutId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetForLayout", ReplyAction="http://tempuri.org/IEventService/GetForLayoutResponse")]
        System.Threading.Tasks.Task<DataPresenter.Entity.Event[]> GetForLayoutAsync(int layoutId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/VisibleEvents", ReplyAction="http://tempuri.org/IEventService/VisibleEventsResponse")]
        DataPresenter.Entity.Event[] VisibleEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/VisibleEvents", ReplyAction="http://tempuri.org/IEventService/VisibleEventsResponse")]
        System.Threading.Tasks.Task<DataPresenter.Entity.Event[]> VisibleEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/Save", ReplyAction="http://tempuri.org/IEventService/SaveResponse")]
        int Save(DataPresenter.Entity.Event _event);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/Save", ReplyAction="http://tempuri.org/IEventService/SaveResponse")]
        System.Threading.Tasks.Task<int> SaveAsync(DataPresenter.Entity.Event _event);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/Update", ReplyAction="http://tempuri.org/IEventService/UpdateResponse")]
        bool Update(DataPresenter.Entity.Event _event);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/Update", ReplyAction="http://tempuri.org/IEventService/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(DataPresenter.Entity.Event _event);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/TicketCount", ReplyAction="http://tempuri.org/IEventService/TicketCountResponse")]
        int TicketCount(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/TicketCount", ReplyAction="http://tempuri.org/IEventService/TicketCountResponse")]
        System.Threading.Tasks.Task<int> TicketCountAsync(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/TicketCountTotal", ReplyAction="http://tempuri.org/IEventService/TicketCountTotalResponse")]
        int TicketCountTotal(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/TicketCountTotal", ReplyAction="http://tempuri.org/IEventService/TicketCountTotalResponse")]
        System.Threading.Tasks.Task<int> TicketCountTotalAsync(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/Buy", ReplyAction="http://tempuri.org/IEventService/BuyResponse")]
        int Buy(int userId, int eventSeatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/Buy", ReplyAction="http://tempuri.org/IEventService/BuyResponse")]
        System.Threading.Tasks.Task<int> BuyAsync(int userId, int eventSeatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/ToCart", ReplyAction="http://tempuri.org/IEventService/ToCartResponse")]
        int ToCart(int userId, int eventSeatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/ToCart", ReplyAction="http://tempuri.org/IEventService/ToCartResponse")]
        System.Threading.Tasks.Task<int> ToCartAsync(int userId, int eventSeatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/FromCart", ReplyAction="http://tempuri.org/IEventService/FromCartResponse")]
        bool FromCart(int userId, int eventSeatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/FromCart", ReplyAction="http://tempuri.org/IEventService/FromCartResponse")]
        System.Threading.Tasks.Task<bool> FromCartAsync(int userId, int eventSeatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/AttachFileToEvent", ReplyAction="http://tempuri.org/IEventService/AttachFileToEventResponse")]
        int AttachFileToEvent(int eventId, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/AttachFileToEvent", ReplyAction="http://tempuri.org/IEventService/AttachFileToEventResponse")]
        System.Threading.Tasks.Task<int> AttachFileToEventAsync(int eventId, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/DeleteFileFromEvent", ReplyAction="http://tempuri.org/IEventService/DeleteFileFromEventResponse")]
        bool DeleteFileFromEvent(int fileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/DeleteFileFromEvent", ReplyAction="http://tempuri.org/IEventService/DeleteFileFromEventResponse")]
        System.Threading.Tasks.Task<bool> DeleteFileFromEventAsync(int fileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetAttachedFilesForEvent", ReplyAction="http://tempuri.org/IEventService/GetAttachedFilesForEventResponse")]
        string[] GetAttachedFilesForEvent(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetAttachedFilesForEvent", ReplyAction="http://tempuri.org/IEventService/GetAttachedFilesForEventResponse")]
        System.Threading.Tasks.Task<string[]> GetAttachedFilesForEventAsync(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetAttachedFilesForEventToPair", ReplyAction="http://tempuri.org/IEventService/GetAttachedFilesForEventToPairResponse")]
        System.Tuple<int, string>[] GetAttachedFilesForEventToPair(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetAttachedFilesForEventToPair", ReplyAction="http://tempuri.org/IEventService/GetAttachedFilesForEventToPairResponse")]
        System.Threading.Tasks.Task<System.Tuple<int, string>[]> GetAttachedFilesForEventToPairAsync(int eventId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEventServiceChannel : TicketManagement.ASP.WCF.EventService.IEventService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EventServiceClient : System.ServiceModel.ClientBase<TicketManagement.ASP.WCF.EventService.IEventService>, TicketManagement.ASP.WCF.EventService.IEventService {
        
        public EventServiceClient() {
        }
        
        public EventServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EventServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Delete(int id) {
            return base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public DataPresenter.Entity.Event Get(int id) {
            return base.Channel.Get(id);
        }
        
        public System.Threading.Tasks.Task<DataPresenter.Entity.Event> GetAsync(int id) {
            return base.Channel.GetAsync(id);
        }
        
        public DataPresenter.Entity.Event[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<DataPresenter.Entity.Event[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public DataPresenter.Entity.Event[] GetForLayout(int layoutId) {
            return base.Channel.GetForLayout(layoutId);
        }
        
        public System.Threading.Tasks.Task<DataPresenter.Entity.Event[]> GetForLayoutAsync(int layoutId) {
            return base.Channel.GetForLayoutAsync(layoutId);
        }
        
        public DataPresenter.Entity.Event[] VisibleEvents() {
            return base.Channel.VisibleEvents();
        }
        
        public System.Threading.Tasks.Task<DataPresenter.Entity.Event[]> VisibleEventsAsync() {
            return base.Channel.VisibleEventsAsync();
        }
        
        public int Save(DataPresenter.Entity.Event _event) {
            return base.Channel.Save(_event);
        }
        
        public System.Threading.Tasks.Task<int> SaveAsync(DataPresenter.Entity.Event _event) {
            return base.Channel.SaveAsync(_event);
        }
        
        public bool Update(DataPresenter.Entity.Event _event) {
            return base.Channel.Update(_event);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(DataPresenter.Entity.Event _event) {
            return base.Channel.UpdateAsync(_event);
        }
        
        public int TicketCount(int eventId) {
            return base.Channel.TicketCount(eventId);
        }
        
        public System.Threading.Tasks.Task<int> TicketCountAsync(int eventId) {
            return base.Channel.TicketCountAsync(eventId);
        }
        
        public int TicketCountTotal(int eventId) {
            return base.Channel.TicketCountTotal(eventId);
        }
        
        public System.Threading.Tasks.Task<int> TicketCountTotalAsync(int eventId) {
            return base.Channel.TicketCountTotalAsync(eventId);
        }
        
        public int Buy(int userId, int eventSeatId) {
            return base.Channel.Buy(userId, eventSeatId);
        }
        
        public System.Threading.Tasks.Task<int> BuyAsync(int userId, int eventSeatId) {
            return base.Channel.BuyAsync(userId, eventSeatId);
        }
        
        public int ToCart(int userId, int eventSeatId) {
            return base.Channel.ToCart(userId, eventSeatId);
        }
        
        public System.Threading.Tasks.Task<int> ToCartAsync(int userId, int eventSeatId) {
            return base.Channel.ToCartAsync(userId, eventSeatId);
        }
        
        public bool FromCart(int userId, int eventSeatId) {
            return base.Channel.FromCart(userId, eventSeatId);
        }
        
        public System.Threading.Tasks.Task<bool> FromCartAsync(int userId, int eventSeatId) {
            return base.Channel.FromCartAsync(userId, eventSeatId);
        }
        
        public int AttachFileToEvent(int eventId, string url) {
            return base.Channel.AttachFileToEvent(eventId, url);
        }
        
        public System.Threading.Tasks.Task<int> AttachFileToEventAsync(int eventId, string url) {
            return base.Channel.AttachFileToEventAsync(eventId, url);
        }
        
        public bool DeleteFileFromEvent(int fileId) {
            return base.Channel.DeleteFileFromEvent(fileId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFileFromEventAsync(int fileId) {
            return base.Channel.DeleteFileFromEventAsync(fileId);
        }
        
        public string[] GetAttachedFilesForEvent(int eventId) {
            return base.Channel.GetAttachedFilesForEvent(eventId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAttachedFilesForEventAsync(int eventId) {
            return base.Channel.GetAttachedFilesForEventAsync(eventId);
        }
        
        public System.Tuple<int, string>[] GetAttachedFilesForEventToPair(int eventId) {
            return base.Channel.GetAttachedFilesForEventToPair(eventId);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<int, string>[]> GetAttachedFilesForEventToPairAsync(int eventId) {
            return base.Channel.GetAttachedFilesForEventToPairAsync(eventId);
        }
    }
}
