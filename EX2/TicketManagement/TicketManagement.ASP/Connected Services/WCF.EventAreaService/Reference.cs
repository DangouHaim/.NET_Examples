//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicketManagement.ASP.WCF.EventAreaService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCF.EventAreaService.IEventAreaService")]
    public interface IEventAreaService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaService/GetAll", ReplyAction="http://tempuri.org/IEventAreaService/GetAllResponse")]
        DataPresenter.Entity.EventArea[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaService/GetAll", ReplyAction="http://tempuri.org/IEventAreaService/GetAllResponse")]
        System.Threading.Tasks.Task<DataPresenter.Entity.EventArea[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaService/Get", ReplyAction="http://tempuri.org/IEventAreaService/GetResponse")]
        DataPresenter.Entity.EventArea Get(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaService/Get", ReplyAction="http://tempuri.org/IEventAreaService/GetResponse")]
        System.Threading.Tasks.Task<DataPresenter.Entity.EventArea> GetAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaService/Update", ReplyAction="http://tempuri.org/IEventAreaService/UpdateResponse")]
        bool Update(DataPresenter.Entity.EventArea eventArea);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaService/Update", ReplyAction="http://tempuri.org/IEventAreaService/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(DataPresenter.Entity.EventArea eventArea);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaService/GetForEvent", ReplyAction="http://tempuri.org/IEventAreaService/GetForEventResponse")]
        DataPresenter.Entity.EventArea[] GetForEvent(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaService/GetForEvent", ReplyAction="http://tempuri.org/IEventAreaService/GetForEventResponse")]
        System.Threading.Tasks.Task<DataPresenter.Entity.EventArea[]> GetForEventAsync(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaService/GetForLayout", ReplyAction="http://tempuri.org/IEventAreaService/GetForLayoutResponse")]
        DataPresenter.Entity.EventArea[] GetForLayout(int layoutId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaService/GetForLayout", ReplyAction="http://tempuri.org/IEventAreaService/GetForLayoutResponse")]
        System.Threading.Tasks.Task<DataPresenter.Entity.EventArea[]> GetForLayoutAsync(int layoutId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEventAreaServiceChannel : TicketManagement.ASP.WCF.EventAreaService.IEventAreaService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EventAreaServiceClient : System.ServiceModel.ClientBase<TicketManagement.ASP.WCF.EventAreaService.IEventAreaService>, TicketManagement.ASP.WCF.EventAreaService.IEventAreaService {
        
        public EventAreaServiceClient() {
        }
        
        public EventAreaServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EventAreaServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventAreaServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventAreaServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DataPresenter.Entity.EventArea[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<DataPresenter.Entity.EventArea[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public DataPresenter.Entity.EventArea Get(int id) {
            return base.Channel.Get(id);
        }
        
        public System.Threading.Tasks.Task<DataPresenter.Entity.EventArea> GetAsync(int id) {
            return base.Channel.GetAsync(id);
        }
        
        public bool Update(DataPresenter.Entity.EventArea eventArea) {
            return base.Channel.Update(eventArea);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(DataPresenter.Entity.EventArea eventArea) {
            return base.Channel.UpdateAsync(eventArea);
        }
        
        public DataPresenter.Entity.EventArea[] GetForEvent(int eventId) {
            return base.Channel.GetForEvent(eventId);
        }
        
        public System.Threading.Tasks.Task<DataPresenter.Entity.EventArea[]> GetForEventAsync(int eventId) {
            return base.Channel.GetForEventAsync(eventId);
        }
        
        public DataPresenter.Entity.EventArea[] GetForLayout(int layoutId) {
            return base.Channel.GetForLayout(layoutId);
        }
        
        public System.Threading.Tasks.Task<DataPresenter.Entity.EventArea[]> GetForLayoutAsync(int layoutId) {
            return base.Channel.GetForLayoutAsync(layoutId);
        }
    }
}
