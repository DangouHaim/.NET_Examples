//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicketManagement.ASP.WCF.EventSeatService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCF.EventSeatService.IEventSeatService")]
    public interface IEventSeatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventSeatService/GetAll", ReplyAction="http://tempuri.org/IEventSeatService/GetAllResponse")]
        DataPresenter.Entity.EventSeat[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventSeatService/GetAll", ReplyAction="http://tempuri.org/IEventSeatService/GetAllResponse")]
        System.Threading.Tasks.Task<DataPresenter.Entity.EventSeat[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventSeatService/Get", ReplyAction="http://tempuri.org/IEventSeatService/GetResponse")]
        DataPresenter.Entity.EventSeat Get(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventSeatService/Get", ReplyAction="http://tempuri.org/IEventSeatService/GetResponse")]
        System.Threading.Tasks.Task<DataPresenter.Entity.EventSeat> GetAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventSeatService/GetForEventArea", ReplyAction="http://tempuri.org/IEventSeatService/GetForEventAreaResponse")]
        DataPresenter.Entity.EventSeat[] GetForEventArea(int eventAreaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventSeatService/GetForEventArea", ReplyAction="http://tempuri.org/IEventSeatService/GetForEventAreaResponse")]
        System.Threading.Tasks.Task<DataPresenter.Entity.EventSeat[]> GetForEventAreaAsync(int eventAreaId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEventSeatServiceChannel : TicketManagement.ASP.WCF.EventSeatService.IEventSeatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EventSeatServiceClient : System.ServiceModel.ClientBase<TicketManagement.ASP.WCF.EventSeatService.IEventSeatService>, TicketManagement.ASP.WCF.EventSeatService.IEventSeatService {
        
        public EventSeatServiceClient() {
        }
        
        public EventSeatServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EventSeatServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventSeatServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventSeatServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DataPresenter.Entity.EventSeat[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<DataPresenter.Entity.EventSeat[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public DataPresenter.Entity.EventSeat Get(int id) {
            return base.Channel.Get(id);
        }
        
        public System.Threading.Tasks.Task<DataPresenter.Entity.EventSeat> GetAsync(int id) {
            return base.Channel.GetAsync(id);
        }
        
        public DataPresenter.Entity.EventSeat[] GetForEventArea(int eventAreaId) {
            return base.Channel.GetForEventArea(eventAreaId);
        }
        
        public System.Threading.Tasks.Task<DataPresenter.Entity.EventSeat[]> GetForEventAreaAsync(int eventAreaId) {
            return base.Channel.GetForEventAreaAsync(eventAreaId);
        }
    }
}
